name: 'iConverter-Test-Build-Deploy'

on:
  push:
    branches: [ master ]
    paths-ignore:
      - '!**.md'

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: iconverter
  CONTAINER_NAME: icontainer
  SERVICE_NAME: iconverter
  CLUSTER_NAME_DEV: dev
  CLUSTER_NAME_PROD: prod
  TASK_DEFINITION: task-definition.json
  MAJOR_APP_VERSION: v2
  MINOR_APP_VERSION: ${{ github.run_number }}
  IMAGE: ${{ secrets.ECR_REGISTRY }}/$ECR_REPOSITORY:$MAJOR_APP_VERSION.$MINOR_APP_VERSION

jobs:
  # Unit-test-server-side:
  #   runs-on: ubuntu-latest

  #   env:
  #     APP_PROJECT_FILE: 'iConverter/iConverter.csproj'
  #     TEST_PROJECT_FILE: 'iConverter-test/iConverter-test.csproj'

  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v3
      
  #   - name: Setup .NET Core
  #     uses: actions/setup-dotnet@v3
  #     with:
  #       dotnet-version: '6.0.x'

  #   - name: Install dependencies
  #     run: dotnet restore $APP_PROJECT_FILE

  #   - name: Build
  #     run: dotnet build $APP_PROJECT_FILE --no-restore

  #   - name: Publish
  #     run: dotnet publish $APP_PROJECT_FILE -c Release -o out

  #   - name: Running tests
  #     run: dotnet test $TEST_PROJECT_FILE

  # Unit-test-client-side:
  #   runs-on: ubuntu-latest

  #   env:
  #     CLIENT_APP_FOLDER: 'iConverter/ClientApp/'

  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v3

  #   - name: Setup Node.js
  #     uses: actions/setup-node@v3
  #     with:
  #       node-version: '19.x'

  #   - name: Clean install
  #     run: npm --prefix $CLIENT_APP_FOLDER ci

  #   - name: Build      
  #     run: npm --prefix $CLIENT_APP_FOLDER run build

  #   - name: Running tests
  #     run: npm --prefix $CLIENT_APP_FOLDER run test
    
  Build-image-and-push-to-ECR:
    runs-on: ubuntu-latest

    # needs: [Unit-test-server-side, Unit-test-client-side]

    steps:
    - name: ECHO
      run: echo $IMAGE

    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1-node16
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build
      run: |
        docker build -t ${{ env.IMAGE }} .
        docker push ${{ env.IMAGE }}

  # Deploy-to-dev:
  #   runs-on: ubuntu-latest

  #   needs: Build-image-and-push-to-ECR

  #   environment:
  #     name: development

  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v3

  #   - name: Configure AWS credentials
  #     uses: aws-actions/configure-aws-credentials@v1-node16
  #     with:
  #       aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #       aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #       aws-region: ${{ env.AWS_REGION }}
    
  #   - name: Login to Amazon ECR
  #     id: login-ecr
  #     uses: aws-actions/amazon-ecr-login@v1
    
  #   - name: Fill in the new image ID in the Amazon ECS task definition
  #     id: task-def
  #     uses: aws-actions/amazon-ecs-render-task-definition@v1
  #     with:
  #       task-definition: ${{ env.TASK_DEFINITION }}
  #       container-name: ${{ env.CONTAINER_NAME }}
  #       image: ${{ secrets.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.MAJOR_APP_VERSION }}.${{ github.run_number }}

  #   - name: Deploy Amazon ECS task definition
  #     uses: aws-actions/amazon-ecs-deploy-task-definition@v1
  #     with:
  #       task-definition: ${{ steps.task-def.outputs.task-definition }}
  #       service: ${{ env.SERVICE_NAME }}
  #       cluster: ${{ env.CLUSTER_NAME_DEV }}
  #       wait-for-service-stability: true

  # Deploy-to-prod:
  #   runs-on: ubuntu-latest

  #   needs: [Build-image-and-push-to-ECR,Deploy-to-dev]

  #   environment:
  #     name: production

  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v3

  #   - name: Configure AWS credentials
  #     uses: aws-actions/configure-aws-credentials@v1-node16
  #     with:
  #       aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #       aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #       aws-region: us-east-1
    
  #   - name: Login to Amazon ECR
  #     id: login-ecr
  #     uses: aws-actions/amazon-ecr-login@v1

  #   - name: Fill in the new image ID in the Amazon ECS task definition
  #     id: task-def
  #     uses: aws-actions/amazon-ecs-render-task-definition@v1
  #     with:
  #       task-definition: task-definition.json
  #       container-name: icontainer
  #       image: ${{ needs.Build-image-and-push-to-ECR.outputs.image }}

  #   - name: Deploy Amazon ECS task definition
  #     uses: aws-actions/amazon-ecs-deploy-task-definition@v1
  #     with:
  #       task-definition: ${{ steps.task-def.outputs.task-definition }}
  #       service: iconverter
  #       cluster: prod
  #       wait-for-service-stability: true
