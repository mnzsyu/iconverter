name: 'iConverter'

on:
  push:
    branches: [ master ]
    paths-ignore:
      - '!**.md'

jobs:
  unit-test-server-side:
  
    runs-on: ubuntu-latest

    env:
      APP_PROJECT_FILE: 'iConverter/iConverter.csproj'
      TEST_PROJECT_FILE: 'iConverter-test/iConverter-test.csproj'

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0.x'

    - name: Install dependencies
      run: dotnet restore $APP_PROJECT_FILE

    - name: Release
      run: dotnet publish $APP_PROJECT_FILE -c Release -o out

    - name: Build
      run: dotnet build $APP_PROJECT_FILE --no-restore

    - name: Running tests
      run: dotnet test $TEST_PROJECT_FILE

  unit-test-client-side:
  
    runs-on: ubuntu-latest

    env:
      CLIENT_APP_FOLDER: 'iConverter/ClientApp/'

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '19.x'

    - name: Clean install
      run: npm --prefix $CLIENT_APP_FOLDER ci

    - name: Build      
      run: npm --prefix $CLIENT_APP_FOLDER run build

    - name: Running tests
      run: npm --prefix $CLIENT_APP_FOLDER run test
    
  build-image-and-push-to-ecr:

    runs-on: ubuntu-latest

    needs: [unit-test-server-side, unit-test-client-side]

    steps:
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        mask-aws-account-id: 'no'

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: iconverter
        IMAGE_TAG: v1.${{ github.run_number }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    outputs:
      image: ${{ steps.build.outputs.image }}
